package active_record

/*
- Суть Active Record проста: мы храним бизнес-логику с логикой хранения сущности.
Иными словами, если очень упрощенно, каждой табличке в БД соответствует класс сущности вместе с поведением.

image_1.png

- Есть достаточно устойчивое мнение, что объединять бизнес логику с логикой хранения в одном классе — это очень плохой,
негодный паттерн. Он нарушает принцип единственной ответственности. И по этой причине Django ORM плоха by design.

- Схема Active Record — это подход к доступу к данным в базе данных.
Таблица базы данных или представление обёрнуты в классы.
Таким образом, объектный экземпляр привязан к единственной строке в таблице.
После создания объекта новая строка будет добавляться к таблице на сохранение.
Любой загруженный объект получает свою информацию от базы данных.
Когда объект обновлён, соответствующая строка в таблице также будет обновлена.
Класс обёртки реализует методы средства доступа или свойства для каждого столбца в таблице или представлении.

- Этот образец обычно используется объектными инструментами персистентности и в объектно-реляционном отображении (ORM).
Как правило, отношения внешнего ключа будут представлены как объектный экземпляр надлежащего типа через свойство.

- Реализации данного шаблона часто нарушают принцип единственной ответственности (SRP), совмещая в одном объекте
как представление и внутреннюю логику самого объекта, так и механизмы CRUD, поэтому Active Record может считаться
антипаттерном[1]. В других случаях это утверждение спорно, так как сам по себе объект, реализующий ActiveRecord,
не содержащий никакой бизнес-логики, а предоставляющий таблицу из базы данных, имеет лишь одну причину для изменения
(изменение таблицы), что не противоречит определением принципа SRP[2].
*/

/*
Общий принцип работы

- Пусть существует таблица в базе данных. Для данной таблицы создаётся специальный класс AR,
являющийся отражением (представлением) таблицы, таким образом, что:

- каждый экземпляр данного класса соответствует одной записи таблицы;
- при создании нового экземпляра класса (и заполнении соответствующих полей) в таблицу добавляется новая запись;
- при чтении полей объекта считываются соответствующие значения записи таблицы баз данных;
- при изменении (удалении) какого-либо объекта изменяется (удаляется) соответствующая ему запись.
*/
