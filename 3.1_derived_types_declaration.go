package main

import "fmt"

/*
Производные типы

# Объявление типов

Оператор type позволяет определять именованный тип.
Именнованный тип основывается на уже существующем типе. Например:
*/
func declarationType() {
	fmt.Println("Объявление производных типов")
	type mile int
	/*
		В данном случае определяется тип mile, который основывается на типе int.
		По сути mile представляет тип int и работа с ним будет производиться также, как и с типом int.
		Однако в то же время фактически это новый тип.

		Мы можем определять переменные данного типа, работать с ними как с объектами базового типа int:
	*/
	var distance mile = 5
	fmt.Println(distance)
	distance += 5
	fmt.Println(distance)
}

/*
	Но может возникнуть вопрос, а зачем это нужно, зачем создавать новый тип, если он все равно
	ведет себя как тип int? Рассмотрим следующую ситуацию:

package main
import "fmt"

type mile int
type kilometer int

func distanceToEnemy (distance mile){

    fmt.Println("расстояние для противника:")
    fmt.Println(distance, "миль")
}

func main() {

    var distance mile = 5
    distanceToEnemy(distance)
    var distance2 kilometer = 5
    // distanceToEnemy(distance2)   // ! ошибка
}

Здесь определены два именованных типа: mile и kilometer, которые по сути представляют тип int
и которые предназначены для выражения расстояния в милях и километрах соответственно.
И также определена функция distanceToEnemy(), которая отображает расстояние в милях до условного
противника. В качестве параметра принимает значение mile - именно значение типа mile, а не типа int.
Это позволит нам уменьшить вероятность передачи некорректных данных.
То есть передаваемые данные должны быть явным образом определены в программе как значение типа mile,
а не типа int или типа kilometer. Таким образом, с помощью именнованных типов мы придаем типу некоторый
дополнительный смысл.
*/

/*
Рассмотрим еще один пример:
package main
import "fmt"

type library []string

func printBooks(lib library){

    for _, value := range lib{

        fmt.Println(value)
    }
}

func main() {

    var myLibrary library = library{"Book1", "Book2", "Book3"}
    printBooks(myLibrary)
}

Здесь определен именованный тип library, который по сути представляет срез из строк.
Данный тип будет представлять своего рода библиотеку, которая включает книги в виде их строковых
названий. С помощью функции printBooks можно вывести все книги из этой библиотеки.
При этом функция printBooks работает именно с типом library, а не с любым срезом из строк.
*/
