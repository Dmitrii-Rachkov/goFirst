package main

import "fmt"

/*
Анонимные функции

Анонимные функции - это функции, которым не назначено имя.
Они отличаются от обычных функций также тем, что они могут определяться внутри других функций
и также могут иметь доступ к контексту выполнения.

Анонимные функции позволяют нам определить некоторое действие непосредственно там, где оно применяется.
Например, нам надо выполнить сложение двух чисел, но больше нигде это действие в программе не нужно:
*/
func anonimSum() {
	fmt.Println("анонимная функция")
	f := func(x, y int) int {
		return x + y
	}
	fmt.Println(f(3, 4))
}

/*
Фактически переменная f определена как:
var f func(int, int) int = func(x, y int) int {
return x + y
}
То есть переменной f можно присвоить любую функцию, которая соответствует типу func(int, int) int.
*/

/*
Анонимная функция как аргумент функции

Очень удобно использовать анонимные функции в качестве аргументов других функций:
*/

func anonimAction(n1 int, n2 int, operation func(int, int) int) {
	result := operation(n1, n2)
	fmt.Println(result)
}

func anonimArgument() {
	fmt.Println("анонимная функция как аргумент")
	anonimAction(10, 25, func(x int, y int) int { return x + y })
}

/*
Анонимная функция как результат функции

Анонимная функция может быть результатом друой функции:
*/
func selectFn(n int) func(int, int) int {
	if n == 1 {
		return func(x int, y int) int { return x + y }
	} else {
		return func(x int, y int) int { return x - y }
	}
}

func anonimResult() {
	fmt.Println("Анонимная функция как результат другой функции")
	f := selectFn(1)
	fmt.Println(f(2, 3))
}

/*
Доступ к окружению

Преимуществом анонимных функций является то, что они имеют доступ к окружению,
в котором они определяются. Например:
*/

func square() func() int {
	var x int = 2
	return func() int {
		x++
		return x * x
	}
}

func anonimEnv() {
	fmt.Println("Анонимная функция с доступом к окружению")
	f := square()
	fmt.Println(f())
	fmt.Println(f())
}

/*
Здесь функция square определяет локальную переменную x и возвращает анонимную функцию.
Анонимная функция увеливичает значение переменной x и возвращает ее квадрат.
Таким образом, мы можем зафисировать у внешней функции square состояние в виде переменной x,
которое будет изменяться в анонимной функции.
*/
